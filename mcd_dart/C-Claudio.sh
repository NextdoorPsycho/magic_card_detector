#!/bin/bash

# ------------------------------------------------------------------------------
# Script: combine_dart_files.sh
# Description:
#   Combines .dart files from the 'lib' directory into multiple output files,
#   each capped at a target file size. Certain files and patterns are ignored.
#   Deletes previously generated output files before starting.
# ------------------------------------------------------------------------------

# === Configuration ===
IGNORE_FILES=(
  "lib/ignore.dart"
  "lib/ignore.txt"
)

LIB_FOLDER="lib"
OUTPUT_PREFIX="mcd_dart"
TARGET_SIZE_KB=1000  # Max size per output file (in KB)
REMOVE_COMMENTS=true  # Set to false to keep comments in output

# === Initialization ===
file_count=0
ignore_count=0
part=1

current_output=$(printf "%s-%03d.txt" "$OUTPUT_PREFIX" "$part")

# === Helpers ===
function should_ignore_file() {
  local filepath="$1"

  # Ignore based on path pattern or extension
  case "$filepath" in
    */generated/* | *.g.dart | lib/testing/* | lib/test/core/* | lib/autumn/*)
      echo "Ignoring: $filepath (pattern match)"
      return 0
      ;;
  esac

  # Ignore exact matches in IGNORE_FILES
  for ignore in "${IGNORE_FILES[@]}"; do
    if [[ "$filepath" == "$ignore" ]]; then
      echo "Ignoring: $filepath (in IGNORE_FILES)"
      return 0
    fi
  done

  if [[ "$filepath" == *.dart ]]; then
    if grep -q -E \
      -e "///This file is automatically generated\. DO NOT EDIT" \
      -e "/// GENERATED CODE - DO NOT MODIFY BY HAND" \
      -e "// File generated by FlutterFire CLI\." \
      -e "///This file is automatically generated\." \
      -e "/// FlutterGen" "$filepath"; then
      echo "Ignoring: $filepath (Dart generated comment)"
      return 0
    fi
  fi

  if [[ "$filepath" == *.py ]]; then
    if grep -q -i -E \
      -e "#.*generated.*do not edit" \
      -e "#.*auto[- ]?generated" \
      -e "#.*this file was generated" "$filepath"; then
      echo "Ignoring: $filepath (Python generated comment)"
      return 0
    fi
  fi

  return 1
}

# === Main Script ===

for folder in "${SRC_FOLDERS[@]}"; do
  if [ ! -d "$folder" ]; then
    echo "Error: '$folder' folder not found."
    exit 1
  fi
done

echo "Removing existing output files matching the pattern ${OUTPUT_PREFIX}-???.txt..."
rm -f "${OUTPUT_PREFIX}"-[0-9][0-9][0-9].txt

echo "Combining .dart and .py files from: ${SRC_FOLDERS[*]}..."

for folder in "${SRC_FOLDERS[@]}"; do
  while IFS= read -r -d '' filepath; do
    if should_ignore_file "$filepath"; then
      ((ignore_count++))
      continue
    fi

    current_size=0
    if [ -f "$current_output" ]; then
      current_size=$(wc -c < "$current_output")
    fi

    if [ "$current_size" -gt 0 ] && [ "$current_size" -gt $((TARGET_SIZE_KB * 1024)) ]; then
      part=$((part + 1))
      current_output=$(printf "%s-%03d.txt" "$OUTPUT_PREFIX" "$part")
      current_size=0
    fi

    echo "Processing: $filepath -> $current_output"
    ((file_count++))

    temp_processed=$(mktemp)
    echo "// File: $filepath" > "$temp_processed"

    if [[ "$filepath" == *.dart ]]; then
      echo "// [DART FILE]" >> "$temp_processed"
      if [ "$REMOVE_COMMENTS" = true ]; then
        perl -0777 -pe 's{/\*.*?\*/}{}gs' "$filepath" | sed -e '/^\s*\/\//d' -e '/^\s*$/d' >> "$temp_processed"
      else
        cat "$filepath" >> "$temp_processed"
      fi
    elif [[ "$filepath" == *.py ]]; then
      echo "# [PYTHON FILE]" >> "$temp_processed"
      if [ "$REMOVE_COMMENTS" = true ]; then
        perl -0777 -pe 's/""".*?"""//gs; s/'''\''.*?'''\''//gs' "$filepath" | \
        sed -e '/^\s*#/d' -e '/^\s*$/d' >> "$temp_processed"
      else
        cat "$filepath" >> "$temp_processed"
      fi
    fi

    cat "$temp_processed" >> "$current_output"
    rm "$temp_processed"

  done < <(find "$folder" -type f \( -name "*.dart" -o -name "*.py" \) -print0)
done

# === Summary ===
if [ $file_count -eq 0 ]; then
  echo "No .dart or .py files were included after applying ignore rules."
  first_output_file=$(printf "%s-%03d.txt" "$OUTPUT_PREFIX" 1)
  if [ -f "$first_output_file" ] && [ ! -s "$first_output_file" ]; then
    rm "$first_output_file"
  fi
else
  if [ -f "$current_output" ] && [ ! -s "$current_output" ]; then
    echo "Removing empty last output file: $current_output"
    rm "$current_output"
    if [ $part -gt 1 ]; then
      part=$((part - 1))
    elif [ $file_count -gt 0 ]; then
      echo "Warning: The only output file was empty."
      part=0
    fi
  fi

  if [ $part -gt 0 ]; then
    echo "Successfully combined $file_count files into $part output file(s) (up to ${OUTPUT_PREFIX}-$(printf "%03d" $part).txt)."
  else
    echo "Combined $file_count files, but the resulting output was empty after processing."
  fi
  echo "Ignored $ignore_count files."
fi

echo "Script completed."